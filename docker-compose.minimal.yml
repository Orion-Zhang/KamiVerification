# 最小化启动配置 - 绕过所有启动脚本问题

services:
  # ===== Django 应用服务 =====
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cardverification_web_minimal
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DJANGO_SETTINGS_MODULE=CardVerification.settings
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
    networks:
      - cardverification_network
    # 直接使用Python启动，跳过所有脚本
    command: >
      bash -c "
        echo '等待数据库启动...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo '数据库已就绪，启动应用...' &&
        python manage.py collectstatic --noinput --clear &&
        exec gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 60 CardVerification.wsgi:application
      "

  # ===== PostgreSQL 数据库服务 =====
  db:
    image: postgres:15-alpine
    container_name: cardverification_db_minimal
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cardverification}
      - POSTGRES_USER=${POSTGRES_USER:-cardverification}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cardverification_network

# ===== 数据卷配置 =====
volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

# ===== 网络配置 =====
networks:
  cardverification_network:
    driver: bridge
