# 适配1Panel部署的Dockerfile
# 优化容器大小和启动速度，适配1Panel容器管理

FROM python:3.11-slim

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DJANGO_SETTINGS_MODULE=CardVerification.settings \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# 设置工作目录
WORKDIR /app

# 创建应用用户和组
RUN groupadd -r django && useradd -r -g django django

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    gettext \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 复制并安装 Python 依赖
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# 复制应用代码
COPY . .

# 创建必要的目录并设置权限（以root用户运行避免权限问题）
RUN mkdir -p staticfiles media backups \
    && chmod -R 777 /app

# 注意：为了避免权限问题，暂时以root用户运行
# 在生产环境中，建议使用适当的用户权限管理

# 暴露端口
EXPOSE 8000

# 健康检查 - 适配1Panel监控
HEALTHCHECK --interval=30s --timeout=30s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health/ || exit 1

# 启动命令 - 直接使用gunicorn，日志输出到stdout/stderr
CMD ["gunicorn", "CardVerification.wsgi:application", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "2", \
     "--worker-class", "sync", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "30", \
     "--keep-alive", "2", \
     "--preload", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info"]
