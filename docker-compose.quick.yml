# 快速启动配置 - 用于解决启动问题

services:
  # ===== Django 应用服务 =====
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cardverification_web_quick
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DJANGO_SETTINGS_MODULE=CardVerification.settings
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cardverification_network
    # 使用bash直接启动，避免权限问题
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        echo "=== 快速启动卡片验证系统 ==="

        # 等待数据库
        echo "等待数据库启动..."
        while ! nc -z db 5432; do
          echo "等待数据库连接..."
          sleep 2
        done
        echo "数据库连接成功！"

        # 运行迁移
        echo "运行数据库迁移..."
        python manage.py migrate --noinput || echo "迁移失败，继续启动..."

        # 收集静态文件
        echo "收集静态文件..."
        python manage.py collectstatic --noinput --clear || echo "静态文件收集失败，继续启动..."

        # 创建超级用户
        if [ -n "$$DJANGO_SUPERUSER_USERNAME" ] && [ -n "$$DJANGO_SUPERUSER_PASSWORD" ]; then
          echo "创建超级用户..."
          python manage.py shell -c "
        from django.contrib.auth import get_user_model
        User = get_user_model()
        if not User.objects.filter(username='$$DJANGO_SUPERUSER_USERNAME').exists():
            User.objects.create_superuser('$$DJANGO_SUPERUSER_USERNAME', '$$DJANGO_SUPERUSER_EMAIL', '$$DJANGO_SUPERUSER_PASSWORD')
            print('超级用户创建成功！')
        else:
            print('超级用户已存在。')
        " || echo "超级用户创建失败"
        fi

        echo "启动Gunicorn服务器..."
        exec gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 60 CardVerification.wsgi:application

  # ===== PostgreSQL 数据库服务 =====
  db:
    image: postgres:15-alpine
    container_name: cardverification_db_quick
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cardverification}
      - POSTGRES_USER=${POSTGRES_USER:-cardverification}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cardverification_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cardverification} -d ${POSTGRES_DB:-cardverification}"]
      interval: 10s
      timeout: 5s
      retries: 5

# ===== 数据卷配置 =====
volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

# ===== 网络配置 =====
networks:
  cardverification_network:
    driver: bridge
